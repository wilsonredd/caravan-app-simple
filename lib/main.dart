import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kDebugMode;
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'providers/auth_provider.dart';
import 'providers/caravan_provider.dart';
import 'screens/login_screen.dart';
import 'screens/home_screen.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase properly using the configuration generated by FlutterFire CLI
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    print('Firebase initialized successfully');
    
    // Ensure demo account exists in dev mode
    if (kDebugMode) {
      try {
        await ensureDemoAccount();
      } catch (e) {
        print('Error ensuring demo account: $e');
      }
    }
  } catch (e) {
    print('Failed to initialize Firebase: $e');
    // App will continue but authentication won't work
  }

  runApp(const MyApp());
}

// Create a demo account for testing if it doesn't already exist
Future<void> ensureDemoAccount() async {
  const demoEmail = 'demo@example.com';
  const demoPassword = 'password';
  
  print('Checking for demo account...');
  bool needToCreateAccount = false;
  
  try {
    // Try to sign in with demo credentials
    final userCredential = await FirebaseAuth.instance.signInWithEmailAndPassword(
      email: demoEmail,
      password: demoPassword,
    );
    print('Demo account exists, signed in successfully: ${userCredential.user?.uid}');
    
    // Sign out immediately so the app starts fresh
    await FirebaseAuth.instance.signOut();
    print('Signed out demo account');
  } catch (e) {
    // If sign-in fails, create the account
    print('Login error: $e');
    if (e is FirebaseAuthException) {
      if (e.code == 'user-not-found') {
        needToCreateAccount = true;
      } else {
        print('Firebase auth error: ${e.code} - ${e.message}');
      }
    }
  }
  
  if (needToCreateAccount) {
    print('Creating demo account...');
    try {
      final userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: demoEmail,
        password: demoPassword,
      );
      
      print('User registered: ${userCredential.user?.uid}');
      
      // Update display name for the demo user
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        await user.updateDisplayName('Demo User');
        print('Updated user display name');
        
        // Create the user document in Firestore
        try {
          await FirebaseFirestore.instance.collection('users').doc(user.uid).set({
            'id': user.uid,
            'name': 'Demo User',
            'email': demoEmail,
          });
          print('Created user document in Firestore');
        } catch (firestoreError) {
          print('Error creating Firestore document: $firestoreError');
        }
      }
      
      print('Demo account created successfully');
      
      // Sign out immediately so the app starts fresh
      await FirebaseAuth.instance.signOut();
      print('Signed out new demo account');
    } catch (createError) {
      print('Error creating demo account: $createError');
    }
  }
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // Use the real Firebase-based provider
        ChangeNotifierProvider(create: (_) => AppAuthProvider()),
        ChangeNotifierProvider(create: (_) => CaravanProvider()),
      ],
      child: MaterialApp(
        title: 'Caravan App',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        home: const AuthWrapper(),
      ),
    );
  }
}

class AuthWrapper extends StatefulWidget {
  const AuthWrapper({Key? key}) : super(key: key);

  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}

class _AuthWrapperState extends State<AuthWrapper> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // Set up auth listener and check current auth state
      Provider.of<AppAuthProvider>(context, listen: false).setupAuthListener();
      Provider.of<AppAuthProvider>(context, listen: false).checkAuth();
    });
  }

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<AppAuthProvider>(context);

    if (authProvider.isLoading) {
      print('AUTH WRAPPER: Loading state');
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }

    final isAuth = authProvider.isAuthenticated;
    print('AUTH WRAPPER BUILD: isAuthenticated=$isAuth, currentUser=${authProvider.currentUser?.id}');
    
    return isAuth
        ? const HomeScreen()
        : const LoginScreen();
  }
}
